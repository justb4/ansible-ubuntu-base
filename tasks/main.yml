---

- name: "Install latest packages"
  apt: update_cache=yes upgrade=full

- name: "Install commonly used packages"
  apt:
    pkg:
    - fail2ban
    - git
    - htop
    - emacs-nox
    - unattended-upgrades
    - apt-show-versions
    - cowsay
    - logwatch
    - ntp
    - screen
    - wget
    - curl
    - nmon
    - pwgen
    - tzdata
    - ufw
    - whois

# Set environment vars (defaults if none supplied in vars)
- name: "Populate /etc/environment"
  become: true
  become_user: root
  lineinfile:
    dest: "/etc/environment"
    state: present
    regexp: "^{{ item.key }}="
    line: "{{ item.key }}={{ item.value}}"
  with_dict: "{{ etc_environment }}"

# Hostname
- shell: hostnamectl set-hostname {{ inventory_hostname }}

# NTP and Timezone setup
- shell: "timedatectl set-timezone {{ timezone }}"

- name: start ntp
  service: name=ntp state=started enabled=true

- name: set ntp server
  lineinfile: dest=/etc/ntpsec/ntp.conf state=present regexp='^server ' line='server {{ ntp_server }} iburst'
  notify: restart ntp

# Note that there may be more than one 'server' line in this file (hence we
# cannot do this with just one regexp rule).
- name: remove all other ntp servers
  lineinfile: dest=/etc/ntpsec/ntp.conf state=absent regexp="^server\s+(?!{{ ntp_server }})"
  notify: restart ntp

# UFW Firewall setup
- name: "Setting up UFW firewall"
  action: lineinfile dest=/etc/default/ufw regexp="^IPV6" line="IPV6=yes" state=present

- name: "Setting up UFW firewall - deny all"
  ufw: state=enabled policy=deny

- name: "Setting up UFW firewall - open ports: {{ ufw_open_ports }}"
  ufw: rule=allow port={{ item }} proto=tcp
  with_items: "{{ ufw_open_ports }}"

# Security updates
- name: "Remove unattended security updates option"
  file: path=/etc/apt/apt.conf.d/10periodic state=absent

- name: "Add unattended security updates option"
  blockinfile:
    dest: /etc/apt/apt.conf.d/10periodic
    create: yes
    block: |
      APT::Periodic::Update-Package-Lists "1";
      APT::Periodic::Download-Upgradeable-Packages "1";
      APT::Periodic::AutocleanInterval "7";
      APT::Periodic::Unattended-Upgrade "1";

- name: "Set Message Of The Day"
  copy: src=motd dest=/etc/motd mode=644

- name: "Copy utility scripts"
  copy: src=bin/ dest=/usr/bin/ mode=755

- name: "Config Logwatch "
  cron: name="save logwatch logs" minute="0" hour="0" job="/usr/sbin/logwatch --detail high --output file --filename /var/log/logwatch.txt" state=present

- name: "Config Logwatch Email"
  cron: name="mail logwatch logs" minute="10" hour="0" job="/usr/bin/sendmail.sh {{ my_email }} LOGWATCH_ATTACHED LOGWATCH_{{ inventory_hostname }} /var/log/logwatch.txt" state=present

- name: "Config Emacs root"
  lineinfile:
    path: ~/.bashrc
    line: alias e='emacs'
    insertafter: alias l='ls -CF'

- name: "Config Emacs {{ my_admin_user }}"
  lineinfile:
    path: "/home/{{ my_admin_user }}/.bashrc"
    line: alias e='emacs'
    insertafter: alias l='ls -CF'

- name: "Config Fail2Ban"
  replace:
    path: /etc/fail2ban/jail.conf
    regexp: '(^bantime)\s+\=\s+10m'
    replace: 'bantime  = 1440m'
    backup: yes
  notify: restart fail2ban

- name: "Create random root password"
  apt:
    pkg:
      - pwgen
      - whois
- shell: /usr/bin/pwgen -s 40 1
  register: root_password
- shell: "/usr/bin/mkpasswd {{ root_password.stdout }} --method=SHA-512"
  register: root_crypted_password
- user: name=root password={{ root_crypted_password.stdout }}
- debug: msg="Password for user 'root' has been set to {{ root_password.stdout }}"

- name: "Disable ssh root logins without the use of a valid ssh key"
  lineinfile: dest=/etc/ssh/sshd_config state=present regexp='^PermitRootLogin ' line='PermitRootLogin without-password'
  notify: restart sshd

- name: "Disable ssh password logins for regular users"
  lineinfile: dest=/etc/ssh/sshd_config state=present regexp='^PasswordAuthentication ' line='PasswordAuthentication no'
  notify: restart sshd
